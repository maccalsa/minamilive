# This is a Caddyfile for local development.
# It sets up Caddy to listen on localhost:8443 with automatic HTTPS
# and reverse proxy requests to different backend services based on the path.

{
	# Global options block.
	# Configures options that apply globally to the Caddy instance.

	# Admin interface configuration.
	# The admin API is used to manage Caddy dynamically.
	# Binding to localhost:2020 makes it accessible only from the local machine.
	admin localhost:2020

	# Explicitly disable automatic HTTPS management for this Caddy instance.
	# This prevents Caddy from trying to bind to port 80/443 for redirects or challenges.
	# This directive belongs in the global options block.
	auto_https off

	# The timeouts directive was incorrectly placed here in a previous attempt.
	# Timeouts are typically configured within reverse_proxy transport blocks in Caddy 2.
	# timeouts {
	# 	dial 30s
	# 	read 30s
	# 	write 30s
	# }

	# You can add other global options here if needed, e.g., email for production TLS.
	# email your-email@example.com
}

# Main server configuration block.
# Defines the site Caddy will serve and its configuration.
# localhost:8443 is the address Caddy listens on.
# Caddy automatically provisions and trusts a TLS certificate for localhost.
localhost:8443 {

    # Explicitly tell Caddy to manage TLS for this site using its internal CA.
	# This helps ensure a trusted certificate is provisioned for localhost:8443.
	tls internal
    
	# The auto_https directive was incorrectly placed here in a previous attempt.
	# It belongs in the global options block.
	# Explicitly disable automatic HTTPS management for this site block.
	# This prevents Caddy from trying to bind to port 80 for redirects or challenges.
	# auto_https off


	# Security headers directive.
	# Adds important security headers to all responses from this site.
	header {
		# Enable HSTS (HTTP Strict Transport Security) to force HTTPS.
		Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
		# Prevent browsers from MIME-sniffing responses away from the declared Content-Type.
		X-Content-Type-Options "nosniff"
		# Enable XSS (Cross-Site Scripting) protection.
		X-XSS-Protection "1; mode=block"
		# Prevent clickjacking attacks by restricting how the page can be framed.
		X-Frame-Options "SAMEORIGIN"
		# Controls how much referrer information is sent with requests.
		Referrer-Policy "strict-origin-when-cross-origin"
	}

	# Encode directive.
	# Enables compression for responses, improving performance.
	# gzip and zstd are common compression algorithms.
	encode gzip zstd

	# Log directive.
	# Configures access logging for requests handled by this site.
	# log {
	# 	# Output logs to a file.
	# 	output file /var/log/caddy/access.log {
	# 		# Configure log rotation based on size and time.
	# 		roll_size 10MB
	# 		roll_keep 5
	# 		roll_keep_for 720h # 720 hours = 30 days
	# 	}
	# 	# Format logs as JSON.
	# 	format json
	# }

	# Alternative logging to standard output (stdout) - useful for local development.
	# Uncomment this block and comment out the file output block above if you prefer.
	log {
		output stdout
		format json
	}

	# Handle_path directive for API endpoints.
	# Matches requests starting with /api/ and handles them.
	handle_path /api/* {
		# Reverse proxy requests to the API backend.
		# Replace 8000 with the actual port your API service is running on.
		reverse_proxy localhost:8000 {
			# Configure specific timeouts for this upstream connection.
			transport http {
				dial_timeout 30s
				response_header_timeout 30s
				# read_timeout 30s # Timeout for reading the entire response body
				# write_timeout 30s # Timeout for writing the entire request body
			}
		}
	}

	# Handle_path directive for WebSocket connections.
	# Matches requests starting with /ws/ and handles them.
	handle_path /ws/* {
		# Reverse proxy requests to the WebSocket backend.
		# Replace 8000 with the actual port your WebSocket service is running on.
		reverse_proxy localhost:8000 {
			# Configure specific timeouts for this upstream connection (often longer for WebSockets).
			transport http {
				dial_timeout 60s
				response_header_timeout 60s
				# read_timeout 60s # Timeout for reading the entire response body
				# write_timeout 60s # Timeout for writing the entire request body
			}
			# Pass necessary headers for WebSocket connections.
			header_up Connection {http.request.header.Connection}
			header_up Upgrade {http.request.header.Upgrade}
		}
	}

	# Handle directive for the frontend.
	# Acts as a fallback for any requests not matched by handle_path directives above.
	# This is typically used for serving the frontend application.
	handle /* {
		# Reverse proxy requests to the frontend development server.
		# Replace 5500 with the actual port your frontend dev server is running on.
		reverse_proxy localhost:5500 {
			# Configure specific timeouts for this upstream connection.
			transport http {
				dial_timeout 30s
				response_header_timeout 30s
				# read_timeout 30s # Timeout for reading the entire response body
				# write_timeout 30s # Timeout for writing the entire request body
			}
		}
	}

	# You can add other directives here that apply to the entire site block,
	# such as static file serving, authentication, etc.
	# Example: Serve static files from a 'public' directory if a file exists.
	# try_files {path} {path}/ /index.html
	# file_server
}
